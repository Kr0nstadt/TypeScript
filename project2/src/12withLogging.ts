//  12. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é withLogging<T>(obj: T), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∫—Å–∏-–æ–±—ä–µ–∫—Ç,
//  –ª–æ–≥–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤—ã –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –æ–±–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞
//  –æ–±—ä–µ–∫—Ç–∞; keyof –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º; —É—Å–ª–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏,
//  —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–µ–π.

type MethodKeys<T> = {
    [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never;
}[keyof T];

type LoggableMethods<T> = {
    [K in MethodKeys<T>]: T[K];
};

function withLogging<T extends object>(obj: T): T {
    const proxy = new Proxy(obj, {
        get(target: T, prop: string | symbol, receiver: any) {
            const value = Reflect.get(target, prop, receiver);
            
            if (typeof value === 'function') {
                return function(this: any, ...args: any[]) {
                    const methodName = String(prop);
                    console.log(` –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ ${methodName} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:`, args);
                    
                    try {
                        const result = value.apply(target, args);
                        console.log(` –ú–µ—Ç–æ–¥ ${methodName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
                        return result;
                    } catch (error) {
                        console.error(` –ú–µ—Ç–æ–¥ ${methodName} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É:`, error);
                        throw error;
                    }
                };
            }
            
            return value;
        },
        
        set(target: T, prop: string | symbol, value: any, receiver: any): boolean {
            console.log(` –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞ ${String(prop)} –≤ –∑–Ω–∞—á–µ–Ω–∏–µ:`, value);
            return Reflect.set(target, prop, value, receiver);
        }
    });
    
    return proxy as T;
}

class Calculator {
    private count: number = 0;

    add(a: number, b: number): number {
        return a + b;
    }

    multiply(a: number, b: number): number {
        return a * b;
    }

    getCount(): number {
        return this.count;
    }

    increment(): void {
        this.count++;
        console.log('Count incremented to:', this.count);
    }

    name: string = "Calculator";
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const calculator = new Calculator();
const loggedCalculator = withLogging(calculator);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
console.log("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ ===");

const sum = loggedCalculator.add(5, 3);
// –í –∫–æ–Ω—Å–æ–ª–∏:  –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ add —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: [5, 3]
// –í –∫–æ–Ω—Å–æ–ª–∏:  –ú–µ—Ç–æ–¥ add —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 8

const product = loggedCalculator.multiply(4, 2);
// –í –∫–æ–Ω—Å–æ–ª–∏:  –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ multiply —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: [4, 2]
// –í –∫–æ–Ω—Å–æ–ª–∏:  –ú–µ—Ç–æ–¥ multiply —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 8

const count = loggedCalculator.getCount();
// –í –∫–æ–Ω—Å–æ–ª–∏:  –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ getCount —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: []
// –í –∫–æ–Ω—Å–æ–ª–∏:  –ú–µ—Ç–æ–¥ getCount —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0

loggedCalculator.increment();
// –í –∫–æ–Ω—Å–æ–ª–∏:  –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ increment —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: []
// –í –∫–æ–Ω—Å–æ–ª–∏: Count incremented to: 1
// –í –∫–æ–Ω—Å–æ–ª–∏:  –ú–µ—Ç–æ–¥ increment —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: undefined

// –û–±—ã—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
console.log(loggedCalculator.name); // "Calculator" (–±–µ–∑ –ª–æ–≥–æ–≤)

class ErrorProne {
    throwError(): never {
        throw new Error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞");
    }
}

const errorProne = withLogging(new ErrorProne());
try {
    errorProne.throwError();
} catch (e) {
    // –í –∫–æ–Ω—Å–æ–ª–∏: üìù –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ throwError —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: []
    // –í –∫–æ–Ω—Å–æ–ª–∏: ‚ùå –ú–µ—Ç–æ–¥ throwError –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: Error: –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞
}